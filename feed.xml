<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text"></title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://kn0.ninja/feed.xml" />
<link rel="alternate" type="text/html" href="http://kn0.ninja" />
<updated>2015-03-03T17:05:59-06:00</updated>
<id>http://kn0.ninja/</id>
<author>
  <name>Trenton Ivey</name>
  <uri>http://kn0.ninja/</uri>
  <email>Trenton.Ivey@gmail.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[PostgreSQL: Pass the Hashed Hash]]></title>
  <link rel="alternate" type="text/html" href="http://kn0.ninja/blog/postgresql-pass-the-hashed-hash/" />
  <id>http://kn0.ninja/blog/postgresql-pass-the-hashed-hash</id>
  <published>2015-03-03T13:49:10-06:00</published>
  <updated>2015-03-03T13:49:10-06:00</updated>
  <author>
    <name>Trenton Ivey</name>
    <uri>http://kn0.ninja</uri>
    <email>Trenton.Ivey@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;After &lt;a href=&quot;https://twitter.com/tony_delagrange&quot; title=&quot;Twitter: Tony Delagrange&quot;&gt;a friend&lt;/a&gt; sent me a link to a &lt;a href=&quot;http://hashcat.net/forum/thread-4148.html&quot; title=&quot;Hashcat Forum Thread 4148&quot;&gt;thread&lt;/a&gt; on the Hashcat.net forum, I spent a little time digging through the PostgreSQL source code. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Hashing the user password before sending it over the wire could be a good thing if done correctly. PostgreSQL didn’t do it correctly. This resulted in a (somewhat different) pass-the-hash style vulnerability&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;authentication-review&quot;&gt;Authentication Review&lt;/h2&gt;

&lt;p&gt;Before looking at the PostgreSQL vulnerability, it helps to review how many other authentication mechanisms work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The username and password is sent to a server over some secure channel (e.g. via a post parameter in HTTPS)&lt;/li&gt;
  &lt;li&gt;The server then hashes the password (we will use p to represent passwords from here on out). p’ = hash(p);&lt;/li&gt;
  &lt;li&gt;The server then compares the p’ with a stored value P’&lt;/li&gt;
  &lt;li&gt;If they match, “come on in”. Otherwise, “get out of here”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In these cases, the ‘cleartext’ password is sent to the server for authentication (hopefully over an encrypted channel).&lt;/p&gt;

&lt;h2 id=&quot;postgresql-authentication&quot;&gt;PostgreSQL Authentication&lt;/h2&gt;

&lt;p&gt;PostgreSQL tried to avoid sending user passwords to the server by doing things a bit differently (at least in the MD5 authentication mode). When the PostgreSQL client &lt;a href=&quot;https://github.com/postgres/postgres/blob/5223ddacdc737b401ed58184e321f354bdf46686/src/interfaces/libpq/fe-auth.c#L493-L547&quot;&gt;sends a user password&lt;/a&gt; (p) during authentication it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Calculates &lt;code&gt;p&#39; = MD5(p + user)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Calculates &lt;code&gt;p&#39;&#39; = MD5(p&#39; + connection-salt[^connection-salt])&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Sends &lt;code&gt;&#39;MD5&#39; + p&#39;&#39;&lt;/code&gt; to the server&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think there were good intentions behind step #2. The goal was to prevent the user’s password from going over the wire in the clear if the transmission was unencrypted. Anyone who captures the hash on the wire would have to crack &lt;code&gt;p&#39;&#39;&lt;/code&gt; and then &lt;code&gt;p&#39;&lt;/code&gt; before they could use the user’s password elsewhere (assuming it was reused). Because these hashes are salted with a username and then a unique salt per connection, this should be difficult.&lt;/p&gt;

&lt;h2 id=&quot;pass-the-hashed-hash&quot;&gt;Pass the Hashed Hash&lt;/h2&gt;

&lt;p&gt;Looking at the &lt;a href=&quot;https://github.com/postgres/postgres/blob/5223ddacdc737b401ed58184e321f354bdf46686/src/backend/libpq/crypt.c&quot;&gt;source&lt;/a&gt;, the server side does a few things when authenticating a user (the following is a bit of an oversimplification):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The server checks to see if the authentication method used was MD5 or plain:
    &lt;ul&gt;
      &lt;li&gt;If plain authentication (&lt;code&gt;p&lt;/code&gt;) was used, the server calculates &lt;code&gt;p&#39;&#39;&lt;/code&gt; with &lt;code&gt;MD5(MD5(p + username) + connection-salt)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;If MD5 authentication (&lt;code&gt;p&#39;&#39;&lt;/code&gt;) was used, the server doesn’t do anything
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;note that the server has no way of knowing if the client generated &lt;code&gt;p&#39;&#39;&lt;/code&gt; from &lt;code&gt;p&#39;&lt;/code&gt; or from &lt;code&gt;p&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The Server checks if the stored password is plaintext or hashed (the &lt;a href=&quot;https://github.com/postgres/postgres/blob/5223ddacdc737b401ed58184e321f354bdf46686/src/backend/libpq/auth.c#L578&quot;&gt;source&lt;/a&gt; calls it encrypted, which makes me question their crypto prowess)
    &lt;ul&gt;
      &lt;li&gt;If the stored value is hashed &lt;code&gt;P&#39;&lt;/code&gt;, the server gets &lt;code&gt;P&#39;&#39;&lt;/code&gt; by calculating &lt;code&gt;(MD5(P&#39; + connection-salt))&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;If the stored value is plaintext &lt;code&gt;P&lt;/code&gt;, the server gets &lt;code&gt;P&#39;&#39;&lt;/code&gt; by calculating &lt;code&gt;MD5(MD5(P + username) + connection-salt))&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The server then compares &lt;code&gt;P&#39;&#39;&lt;/code&gt; with &lt;code&gt;p&#39;&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;If they match, “come on in”. Otherwise, “get out of here”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The researchers at Hashcat found that you could skip step #1 in the client if you knew &lt;code&gt;p&#39;&lt;/code&gt;. You could just calculate and send  &lt;code&gt;p&#39;&#39; = MD5(p&#39; + connection-salt)&lt;/code&gt;. Authentication still works!&lt;/p&gt;

&lt;p&gt;It is important to note that capturing the hash over the wire (&lt;code&gt;p&#39;&#39;&lt;/code&gt;) cannot directly be used in a pass-the-hash style attack due to the random connection-salt.
However, it may be possible to keep connecting to the server over and over again until the salt that the PostgreSQL server provides is the same as the one used to create the captured hash.
Even with a &lt;a href=&quot;https://github.com/postgres/postgres/blob/5223ddacdc737b401ed58184e321f354bdf46686/src/backend/postmaster/postmaster.c#L4941-L4962&quot;&gt;small salt&lt;/a&gt; (255^4) this would be a difficult attack.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://kn0.ninja/blog/postgresql-pass-the-hashed-hash/&quot;&gt;PostgreSQL: Pass the Hashed Hash&lt;/a&gt; was originally published by Trenton Ivey at &lt;a href=&quot;http://kn0.ninja&quot;&gt;&lt;/a&gt; on March 03, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[This Probably Won't Last]]></title>
  <link rel="alternate" type="text/html" href="http://kn0.ninja/blog/this-probably-wont-last/" />
  <id>http://kn0.ninja/blog/this-probably-wont-last</id>
  <published>2015-02-26T21:00:38-06:00</published>
  <updated>2015-02-26T21:00:38-06:00</updated>
  <author>
    <name>Trenton Ivey</name>
    <uri>http://kn0.ninja</uri>
    <email>Trenton.Ivey@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Starting a blog (again) has been on my list of to-dos for a while. This probably won’t last, but that doesn’t bother me.
Some say, “The journey is more important than the destination”. Others say, “&lt;a href=&quot;http://www.fluentin3months.com/fail-fast&quot; title=&quot;Fail Fast and Fail Often&quot;&gt;Fail fast and fail often&lt;/a&gt;”.
I agree with &lt;a href=&quot;https://twitter.com/at1as&quot; title=&quot;At1as on Twitter&quot;&gt;At1as&lt;/a&gt;. &lt;a href=&quot;http://www.irongeek.com/i.php?page=videos/derbycon4/t312-grok-atlas&quot; title=&quot;GROK talk by At1as&quot;&gt;GROK!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In building this site I got to play around with a few fun toys:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I decided to host this site using &lt;a href=&quot;https://pages.github.com/&quot; title=&quot;Github Pages&quot;&gt;Github Pages&lt;/a&gt;. They provide free hosting. Managing a website via &lt;a href=&quot;https://github.com&quot; title=&quot;GitHub&quot;&gt;GitHub&lt;/a&gt; is a joy.&lt;/li&gt;
  &lt;li&gt;I decided to use &lt;a href=&quot;http://jekyllrb.com/&quot; title=&quot;Jekyll Website&quot;&gt;Jekyll&lt;/a&gt;. I love the idea of using a website generator to create a dynamic feeling site that is composed of only static pages.
Among other things, this improves security (there is no need to worry about a back-end database or user supplied input).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mademistakes.com/about/&quot;&gt;Michael Rose&lt;/a&gt; has made some beautiful themes for Jekyll. I decided to use his &lt;a href=&quot;https://github.com/mmistakes/so-simple-theme&quot; title=&quot;So Simple Theme by Michael Rose&quot;&gt;So Simple Theme&lt;/a&gt; as a starting point (I haven’t changed much yet).&lt;/li&gt;
  &lt;li&gt;I found a really cool &lt;a href=&quot;http://codepen.io/Supercopra/pen/LExaGR&quot;&gt;Codepen&lt;/a&gt; created by &lt;a href=&quot;http://codepen.io/Supercopra/&quot; title=&quot;Supercopra Codepen Page&quot;&gt;Supercopra&lt;/a&gt; (aka. Julius Horn). I tweaked his code a bit to make it work as a header to the page.&lt;/li&gt;
&lt;/ul&gt;


    &lt;p&gt;&lt;a href=&quot;http://kn0.ninja/blog/this-probably-wont-last/&quot;&gt;This Probably Won&#39;t Last&lt;/a&gt; was originally published by Trenton Ivey at &lt;a href=&quot;http://kn0.ninja&quot;&gt;&lt;/a&gt; on February 26, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>